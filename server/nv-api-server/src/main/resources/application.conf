play.evolutions.autoApply=true

play.modules.enabled += "modules.ServerModule"

slick.dbs.default.driver = "slick.driver.H2Driver$"
slick.dbs.default.db.driver = "org.h2.Driver"
slick.dbs.default.db.url = "jdbc:h2:mem:play;MODE=MySQL;DB_CLOSE_DELAY=-1"

slick.dbs.discussion.driver = "slick.driver.H2Driver$"
slick.dbs.discussion.db.driver = "org.h2.Driver"
slick.dbs.discussion.db.url = "jdbc:h2:mem:discussion;MODE=MySQL;DB_CLOSE_DELAY=-1"

play.filters.cors {
  pathPrefixes = ["/api/v1"]
  allowedOrigins = ["http://localhost:3000"]
  allowedHttpMethods = ["GET", "POST", "PUT", "DELETE"]
  preflightMaxAge = 3 days
}

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      discussion = "nv.discussion.port.adapter.serializer.DiscussionSerializerWithProtobuf"
    }

    serialization-bindings {
      "nv.discussion.domain.model.discussion.Discussion$Events$DiscussionCreated" = discussion
      "nv.discussion.domain.model.discussion.Discussion$Events$CommentAdded" = discussion
    }
  }


  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 9008
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://application@127.0.0.1:9008"]

    min-nr-of-members = 1

    roles = [discussion-command-backend,discussion-projection]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s

  }

  persistence {
    query.journal.leveldb {
      # Implementation class of the LevelDB ReadJournalProvider
      class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

      # Absolute path to the write journal plugin configuration entry that this
      # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
      # If undefined (or "") it will connect to the default journal as specified by the
      # akka.persistence.journal.plugin property.
      write-plugin = ""

      # The LevelDB write journal is notifying the query side as soon as things
      # are persisted, but for efficiency reasons the query side retrieves the events
      # in batches that sometimes can be delayed up to the configured `refresh-interval`.
      refresh-interval = 3s

      # How many events to fetch in one query (replay) and keep buffered until they
      # are delivered downstreams.
      max-buffer-size = 100
    }

    journal {
      plugin = "akka.persistence.journal.leveldb"

      leveldb {
        native = off
        dir = "target/journal"

        event-adapters {
          discussion-tagging = "nv.discussion.port.adapter.event.DiscussionEventAdapter"
        }

        event-adapter-bindings {
          "nv.discussion.domain.model.discussion.Discussion$Events$DiscussionEvent" = discussion-tagging
        }

      }
    }
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  }

  loggers = ["akka.testkit.TestEventListener"]
}

