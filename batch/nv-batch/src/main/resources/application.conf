akka {
  extensions += "akka.cluster.ddata.DistributedData"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      discussion = "nv.discussion.port.adapter.serializer.DiscussionSerializerWithProtobuf"
    }

    serialization-bindings {
      "nv.discussion.domain.model.discussion.Discussion$Events$DiscussionCreated" = discussion
      "nv.discussion.domain.model.discussion.Discussion$Events$CommentAdded" = discussion
      "nv.discussion.domain.model.discussion.Discussion$Events$CommentEdited" = discussion
      "nv.discussion.domain.model.discussion.Discussion$Events$CommentDeleted" = discussion
      "nv.discussion.domain.model.discussion.Discussion$Events$MissedEvent" = discussion
    }
  }


  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 8008
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://application@127.0.0.1:9008"]

    min-nr-of-members = 1

    roles = [batch]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s

    sharding.state-store-mode = ddata
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  loggers = ["akka.testkit.TestEventListener"]
}

cassandra-journal {

  event-adapters {
    discussion-tagging = "nv.discussion.port.adapter.event.DiscussionEventAdapter"
    skkiped = "nv.discussion.port.adapter.event.SkippedEventsAwareAdapter"
  }

  event-adapter-bindings {
    "nv.discussion.domain.model.discussion.Discussion$Events$DiscussionEvent" =  discussion-tagging
    "nv.discussion.port.adapter.serializer.EventDeserializationSkipped$" = skkiped
  }

  tags {
    Discussion = 1
  }
}